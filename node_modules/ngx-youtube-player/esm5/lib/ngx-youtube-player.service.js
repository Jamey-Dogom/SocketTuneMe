/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @return {?}
 */
export function win() {
    return window;
}
/**
 * @return {?}
 */
export function YouTubeRef() {
    return win()['YT'];
}
/**
 * @return {?}
 */
export function YouTubePlayerRef() {
    return YouTubeRef().Player;
}
/** @type {?} */
export var defaultSizes = {
    height: 270,
    width: 367
};
var YoutubePlayerService = /** @class */ (function () {
    function YoutubePlayerService(zone) {
        this.zone = zone;
        this.ytApiLoaded = false;
        this.api = new ReplaySubject(1);
        this.createApi();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    YoutubePlayerService.prototype.loadPlayerApi = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var doc = win().document;
        if (!this.ytApiLoaded) {
            this.ytApiLoaded = true;
            /** @type {?} */
            var playerApiScript = doc.createElement('script');
            playerApiScript.type = 'text/javascript';
            playerApiScript.src = options.protocol + "://www.youtube.com/iframe_api";
            doc.body.appendChild(playerApiScript);
        }
    };
    /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    YoutubePlayerService.prototype.setupPlayer = /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    function (elementId, outputs, sizes, videoId, playerVars) {
        var _this = this;
        if (videoId === void 0) { videoId = ''; }
        /** @type {?} */
        var createPlayer = (/**
         * @return {?}
         */
        function () {
            if (YouTubePlayerRef) {
                _this.createPlayer(elementId, outputs, sizes, videoId, playerVars);
            }
        });
        this.api.subscribe(createPlayer);
    };
    /**
     * @param {?} player
     * @return {?}
     */
    YoutubePlayerService.prototype.play = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        player.playVideo();
    };
    /**
     * @param {?} player
     * @return {?}
     */
    YoutubePlayerService.prototype.pause = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        player.pauseVideo();
    };
    /**
     * @param {?} media
     * @param {?} player
     * @return {?}
     */
    YoutubePlayerService.prototype.playVideo = /**
     * @param {?} media
     * @param {?} player
     * @return {?}
     */
    function (media, player) {
        /** @type {?} */
        var id = media.id.videoId ? media.id.videoId : media.id;
        player.loadVideoById(id);
        this.play(player);
    };
    /**
     * @param {?} player
     * @return {?}
     */
    YoutubePlayerService.prototype.isPlaying = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING
        /** @type {?} */
        var isPlayerReady = player && player.getPlayerState;
        /** @type {?} */
        var playerState = isPlayerReady ? player.getPlayerState() : {};
        /** @type {?} */
        var isPlayerPlaying = isPlayerReady
            ? playerState !== YouTubeRef().PlayerState.ENDED &&
                playerState !== YouTubeRef().PlayerState.PAUSED
            : false;
        return isPlayerPlaying;
    };
    /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    YoutubePlayerService.prototype.createPlayer = /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    function (elementId, outputs, sizes, videoId, playerVars) {
        var _this = this;
        if (videoId === void 0) { videoId = ''; }
        if (playerVars === void 0) { playerVars = {}; }
        /** @type {?} */
        var playerSize = {
            height: sizes.height || defaultSizes.height,
            width: sizes.width || defaultSizes.width
        };
        /** @type {?} */
        var ytPlayer = YouTubePlayerRef();
        return new ytPlayer(elementId, tslib_1.__assign({}, playerSize, { events: {
                onReady: (/**
                 * @param {?} ev
                 * @return {?}
                 */
                function (ev) {
                    _this.zone.run((/**
                     * @return {?}
                     */
                    function () { return outputs.ready && outputs.ready.next(ev.target); }));
                }),
                onStateChange: (/**
                 * @param {?} ev
                 * @return {?}
                 */
                function (ev) {
                    _this.zone.run((/**
                     * @return {?}
                     */
                    function () { return outputs.change && outputs.change.next(ev); }));
                })
            }, playerVars: playerVars,
            videoId: videoId }));
    };
    /**
     * @param {?} player
     * @param {?} isFullScreen
     * @return {?}
     */
    YoutubePlayerService.prototype.toggleFullScreen = /**
     * @param {?} player
     * @param {?} isFullScreen
     * @return {?}
     */
    function (player, isFullScreen) {
        var height = defaultSizes.height, width = defaultSizes.width;
        if (!isFullScreen) {
            height = window.innerHeight;
            width = window.innerWidth;
        }
        player.setSize(width, height);
    };
    // adpoted from uid
    // adpoted from uid
    /**
     * @return {?}
     */
    YoutubePlayerService.prototype.generateUniqueId = 
    // adpoted from uid
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var len = 7;
        return Math.random()
            .toString(35)
            .substr(2, len);
    };
    /**
     * @private
     * @return {?}
     */
    YoutubePlayerService.prototype.createApi = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var onYouTubeIframeAPIReady = (/**
         * @return {?}
         */
        function () {
            if (win()) {
                _this.api.next(YouTubeRef());
            }
        });
        win()['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;
    };
    YoutubePlayerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    YoutubePlayerService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    /** @nocollapse */ YoutubePlayerService.ngInjectableDef = i0.defineInjectable({ factory: function YoutubePlayerService_Factory() { return new YoutubePlayerService(i0.inject(i0.NgZone)); }, token: YoutubePlayerService, providedIn: "root" });
    return YoutubePlayerService;
}());
export { YoutubePlayerService };
if (false) {
    /** @type {?} */
    YoutubePlayerService.prototype.api;
    /**
     * @type {?}
     * @private
     */
    YoutubePlayerService.prototype.ytApiLoaded;
    /**
     * @type {?}
     * @private
     */
    YoutubePlayerService.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,