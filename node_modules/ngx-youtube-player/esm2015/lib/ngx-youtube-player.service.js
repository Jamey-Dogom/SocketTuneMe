/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @return {?}
 */
export function win() {
    return window;
}
/**
 * @return {?}
 */
export function YouTubeRef() {
    return win()['YT'];
}
/**
 * @return {?}
 */
export function YouTubePlayerRef() {
    return YouTubeRef().Player;
}
/** @type {?} */
export const defaultSizes = {
    height: 270,
    width: 367
};
export class YoutubePlayerService {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        this.ytApiLoaded = false;
        this.api = new ReplaySubject(1);
        this.createApi();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    loadPlayerApi(options) {
        /** @type {?} */
        const doc = win().document;
        if (!this.ytApiLoaded) {
            this.ytApiLoaded = true;
            /** @type {?} */
            const playerApiScript = doc.createElement('script');
            playerApiScript.type = 'text/javascript';
            playerApiScript.src = `${options.protocol}://www.youtube.com/iframe_api`;
            doc.body.appendChild(playerApiScript);
        }
    }
    /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    setupPlayer(elementId, outputs, sizes, videoId = '', playerVars) {
        /** @type {?} */
        const createPlayer = (/**
         * @return {?}
         */
        () => {
            if (YouTubePlayerRef) {
                this.createPlayer(elementId, outputs, sizes, videoId, playerVars);
            }
        });
        this.api.subscribe(createPlayer);
    }
    /**
     * @param {?} player
     * @return {?}
     */
    play(player) {
        player.playVideo();
    }
    /**
     * @param {?} player
     * @return {?}
     */
    pause(player) {
        player.pauseVideo();
    }
    /**
     * @param {?} media
     * @param {?} player
     * @return {?}
     */
    playVideo(media, player) {
        /** @type {?} */
        const id = media.id.videoId ? media.id.videoId : media.id;
        player.loadVideoById(id);
        this.play(player);
    }
    /**
     * @param {?} player
     * @return {?}
     */
    isPlaying(player) {
        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING
        /** @type {?} */
        const isPlayerReady = player && player.getPlayerState;
        /** @type {?} */
        const playerState = isPlayerReady ? player.getPlayerState() : {};
        /** @type {?} */
        const isPlayerPlaying = isPlayerReady
            ? playerState !== YouTubeRef().PlayerState.ENDED &&
                playerState !== YouTubeRef().PlayerState.PAUSED
            : false;
        return isPlayerPlaying;
    }
    /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    createPlayer(elementId, outputs, sizes, videoId = '', playerVars = {}) {
        /** @type {?} */
        const playerSize = {
            height: sizes.height || defaultSizes.height,
            width: sizes.width || defaultSizes.width
        };
        /** @type {?} */
        const ytPlayer = YouTubePlayerRef();
        return new ytPlayer(elementId, Object.assign({}, playerSize, { events: {
                onReady: (/**
                 * @param {?} ev
                 * @return {?}
                 */
                (ev) => {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => outputs.ready && outputs.ready.next(ev.target)));
                }),
                onStateChange: (/**
                 * @param {?} ev
                 * @return {?}
                 */
                (ev) => {
                    this.zone.run((/**
                     * @return {?}
                     */
                    () => outputs.change && outputs.change.next(ev)));
                })
            }, playerVars,
            videoId }));
    }
    /**
     * @param {?} player
     * @param {?} isFullScreen
     * @return {?}
     */
    toggleFullScreen(player, isFullScreen) {
        let { height, width } = defaultSizes;
        if (!isFullScreen) {
            height = window.innerHeight;
            width = window.innerWidth;
        }
        player.setSize(width, height);
    }
    // adpoted from uid
    /**
     * @return {?}
     */
    generateUniqueId() {
        /** @type {?} */
        const len = 7;
        return Math.random()
            .toString(35)
            .substr(2, len);
    }
    /**
     * @private
     * @return {?}
     */
    createApi() {
        /** @type {?} */
        const onYouTubeIframeAPIReady = (/**
         * @return {?}
         */
        () => {
            if (win()) {
                this.api.next(YouTubeRef());
            }
        });
        win()['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;
    }
}
YoutubePlayerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
YoutubePlayerService.ctorParameters = () => [
    { type: NgZone }
];
/** @nocollapse */ YoutubePlayerService.ngInjectableDef = i0.defineInjectable({ factory: function YoutubePlayerService_Factory() { return new YoutubePlayerService(i0.inject(i0.NgZone)); }, token: YoutubePlayerService, providedIn: "root" });
if (false) {
    /** @type {?} */
    YoutubePlayerService.prototype.api;
    /**
     * @type {?}
     * @private
     */
    YoutubePlayerService.prototype.ytApiLoaded;
    /**
     * @type {?}
     * @private
     */
    YoutubePlayerService.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,