import { Injectable } from "@angular/core";
import { GoogleApiService } from "./GoogleApiService";
import { mergeMap } from 'rxjs/operators';
import { of } from 'rxjs/internal/observable/of';
import { Observable } from 'rxjs/Observable';
var GoogleAuthService = /** @class */ (function () {
    function GoogleAuthService(googleApi) {
        var _this = this;
        this.googleApi = googleApi;
        this.GoogleAuth = undefined;
        this.googleApi.onLoad().subscribe(function () {
            _this.loadGapiAuth().subscribe();
        });
    }
    GoogleAuthService.prototype.getAuth = function (newInstance) {
        var _this = this;
        if (newInstance === void 0) { newInstance = false; }
        if (!this.GoogleAuth || newInstance) {
            return this.googleApi.onLoad()
                .pipe(mergeMap(function () { return _this.loadGapiAuth(); }));
        }
        return of(this.GoogleAuth);
    };
    GoogleAuthService.prototype.loadGapiAuth = function () {
        var _this = this;
        return new Observable(function (observer) {
            gapi.load('auth2', function () {
                gapi.auth2.init(_this.googleApi.getConfig().getClientConfig()).then(function (auth) {
                    _this.GoogleAuth = auth;
                    observer.next(auth);
                    observer.complete();
                }).catch(function (err) { return observer.error(err); });
            });
        });
    };
    GoogleAuthService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    GoogleAuthService.ctorParameters = function () { return [
        { type: GoogleApiService, },
    ]; };
    return GoogleAuthService;
}());
export { GoogleAuthService };
